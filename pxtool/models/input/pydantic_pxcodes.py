# generated by datamodel-codegen:
#   filename:  pxcodes.yaml
#   timestamp: 2023-09-21T11:25:19+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class Admin(BaseModel):
    is_final: Optional[bool] = Field(None, alias='isFinal')
    """
    todo. ignored for now
    """
    tags: Optional[List[str]] = None
    todo_creation: Optional[str] = Field(None, alias='todoCreation')


class SortGroupingsOn(Enum):
    """
    Sets the order of the groupings in the dropdown. (So only needed if you have groupings.
    """

    filename_base = 'filenameBase'
    label = 'label'
    rank = 'rank'


class SortValueitemsOn(Enum):
    code = 'code'
    label = 'label'
    rank = 'rank'


class Note(BaseModel):
    text: Dict[str, str]
    is_mandatory: bool = Field(..., alias='isMandatory')


class Valueitem(BaseModel):
    code: Optional[str] = None
    """
    Code of the item example: 123234a
    """
    unordered_children: Optional[List[str]] = Field(None, alias='unorderedChildren')
    """
    Any children in random order. The children MUST exist in root-valueitems and will be sorted as they are there.
    """
    label: Optional[Dict[str, str]] = None
    """
    Texts of the item example: en:Total, no: I alt
    """
    rank: Optional[Dict[str, str]] = None
    """
    Strings to sort by when code or label is not sufficient
    """
    notes: Optional[List[Note]] = None
    """
    Any fotnotes
    """


class Grouping(BaseModel):
    filename_base: Optional[str] = Field(None, alias='filenameBase')
    """
    To this filenameBase the language and filetype will be added.
    """
    label: Optional[Dict[str, str]] = None
    """
    Texts for 'the dropdown' where you select which grouping to use
    """
    rank: Optional[Dict[str, str]] = None
    """
    Strings to sort by when code or label is not sufficient
    """
    sort_valueitems_on: Optional[SortValueitemsOn] = Field(
        None, alias='sortValueitemsOn'
    )
    """
    How to sort the list of mothers. The children will be sorted by the root-sortValueitemsOn
    """
    valueitems: Optional[List[Valueitem]] = None
    """
    The list of mothers.
    """


class PxCodes(BaseModel):
    """
    For one variable, this should hold all the information needed for the VALUES and CODES px-keywords (aka the codelist), and to create any vs and agg files (aka the groupings) if such is desired. In addition this contains partial information on elimination.
    """

    id: str
    """
    Id of this document, example: 123234a
    """
    admin: Optional[Admin] = None
    sort_valueitems_on: SortValueitemsOn = Field(..., alias='sortValueitemsOn')
    """
    How the items in the codelist is sorted.
    """
    label: Optional[Dict[str, str]] = None
    """
    Texts for 'the dropdown' where you select which grouping to use or return to this codelist
    """
    valueitems: List[Valueitem]
    """
    These are the 'root-entries' describe what is in the data.
    """
    elimination_possible: bool = Field(..., alias='eliminationPossible')
    """
    May this variable be eliminnated. If True and eliminationCode is empty use Sum.
    """
    elimination_code: Optional[str] = Field(None, alias='eliminationCode')
    """
    example: 'tot'. Value of the code to use for eliminnating the variable. Must be from root-entries, not from a grouping.
    """
    sort_groupings_on: Optional[SortGroupingsOn] = Field(None, alias='sortGroupingsOn')
    """
    Sets the order of the groupings in the dropdown. (So only needed if you have groupings.
    """
    groupings: Optional[List[Grouping]] = None
    """
    List where an element is a grouping. A grouping is a list of mothers. The code of a mother must not be present in the root-valueitems. The children of a mother must be present in the root-valueitems and must be a unique list. The child may have many mothers.
    """
